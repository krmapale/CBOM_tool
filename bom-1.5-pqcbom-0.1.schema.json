{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://cyclonedx.org/schema/bom-1.5.schema.json",
    "type": "object",
    "title": "CycloneDX Software Bill of Materials Standard",
    "$comment" : "CycloneDX JSON schema is published under the terms of the Apache License 2.0.",
    "required": [
      "bomFormat",
      "specVersion"
    ],
    "properties": {
        "$schema": {
          "type": "string",
          "enum": [
            "http://cyclonedx.org/schema/bom-1.5.schema.json"
          ]
        },
        "components": {
          "type": "array",
          "items": {"$ref": "#/definitions/component"},
          "uniqueItems": true,
          "title": "Components",
          "description": "A list of software and hardware components.",
          "cryptoProperties": {
            "assetType": [
              "algorithm",
              "protocol",
              "related-crypto-material",
              "certificate"
            ],
            "certificateProperties":{

            },
            "relatedCryptoMaterialProperties":{

            },
            "algorithmProperties":{

            },
            "protocolProperties":{

            }
          }
        }
      },
    "definitions": {
        "component": {
            "type": "object",
            "title": "Component Object",
            "required": [
              "type",
              "name"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "application",
                  "framework",
                  "library",
                  "container",
                  "platform",
                  "operating-system",
                  "device",
                  "device-driver",
                  "firmware",
                  "file",
                  "machine-learning-model",
                  "data"
                ],
                "title": "Component Type",
                "description": "Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component. Types include:\n\n* __application__ = A software application. Refer to [https://en.wikipedia.org/wiki/Application_software](https://en.wikipedia.org/wiki/Application_software) for information about applications.\n* __framework__ = A software framework. Refer to [https://en.wikipedia.org/wiki/Software_framework](https://en.wikipedia.org/wiki/Software_framework) for information on how frameworks vary slightly from libraries.\n* __library__ = A software library. Refer to [https://en.wikipedia.org/wiki/Library_(computing)](https://en.wikipedia.org/wiki/Library_(computing))\n for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is RECOMMENDED.\n* __container__ = A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to [https://en.wikipedia.org/wiki/OS-level_virtualization](https://en.wikipedia.org/wiki/OS-level_virtualization)\n* __platform__ = A runtime environment which interprets or executes software. This may include runtimes such as those that execute bytecode or low-code/no-code application platforms.\n* __operating-system__ = A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to [https://en.wikipedia.org/wiki/Operating_system](https://en.wikipedia.org/wiki/Operating_system)\n* __device__ = A hardware device such as a processor, or chip-set. A hardware device containing firmware SHOULD include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device.\n  See also the list of [known device properties](https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md).\n* __device-driver__ = A special type of software that operates or controls a particular type of device. Refer to [https://en.wikipedia.org/wiki/Device_driver](https://en.wikipedia.org/wiki/Device_driver)\n* __firmware__ = A special type of software that provides low-level control over a devices hardware. Refer to [https://en.wikipedia.org/wiki/Firmware](https://en.wikipedia.org/wiki/Firmware)\n* __file__ = A computer file. Refer to [https://en.wikipedia.org/wiki/Computer_file](https://en.wikipedia.org/wiki/Computer_file) for information about files.\n* __machine-learning-model__ = A model based on training data that can make predictions or decisions without being explicitly programmed to do so.\n* __data__ = A collection of discrete values that convey information.",
                "examples": ["library"]
              },
              "mime-type": {
                "type": "string",
                "title": "Mime-Type",
                "description": "The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.",
                "examples": ["image/jpeg"],
                "pattern": "^[-+a-z0-9.]+/[-+a-z0-9.]+$"
              },
              "bom-ref": {
                "$ref": "#/definitions/refType",
                "title": "BOM Reference",
                "description": "An optional identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref MUST be unique within the BOM."
              },
              "supplier": {
                "title": "Component Supplier",
                "description": " The organization that supplied the component. The supplier may often be the manufacturer, but may also be a distributor or repackager.",
                "$ref": "#/definitions/organizationalEntity"
              },
              "author": {
                "type": "string",
                "title": "Component Author",
                "description": "The person(s) or organization(s) that authored the component",
                "examples": ["Acme Inc"]
              },
              "publisher": {
                "type": "string",
                "title": "Component Publisher",
                "description": "The person(s) or organization(s) that published the component",
                "examples": ["Acme Inc"]
              },
              "group": {
                "type": "string",
                "title": "Component Group",
                "description": "The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.",
                "examples": ["com.acme"]
              },
              "name": {
                "type": "string",
                "title": "Component Name",
                "description": "The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery",
                "examples": ["tomcat-catalina"]
              },
              "version": {
                "type": "string",
                "title": "Component Version",
                "description": "The component version. The version should ideally comply with semantic versioning but is not enforced.",
                "examples": ["9.0.14"]
              },
              "description": {
                "type": "string",
                "title": "Component Description",
                "description": "Specifies a description for the component"
              },
              "scope": {
                "type": "string",
                "enum": [
                  "required",
                  "optional",
                  "excluded"
                ],
                "title": "Component Scope",
                "description": "Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the consumer of the BOM.",
                "default": "required"
              },
              "hashes": {
                "type": "array",
                "title": "Component Hashes",
                "items": {"$ref": "#/definitions/hash"}
              },
              "licenses": {
                "$ref": "#/definitions/licenseChoice",
                "title": "Component License(s)"
              },
              "copyright": {
                "type": "string",
                "title": "Component Copyright",
                "description": "A copyright notice informing users of the underlying claims to copyright ownership in a published work.",
                "examples": ["Acme Inc"]
              },
              "cpe": {
                "type": "string",
                "title": "Component Common Platform Enumeration (CPE)",
                "description": "Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See [https://nvd.nist.gov/products/cpe](https://nvd.nist.gov/products/cpe)",
                "examples": ["cpe:2.3:a:acme:component_framework:-:*:*:*:*:*:*:*"]
              },
              "purl": {
                "type": "string",
                "title": "Component Package URL (purl)",
                "description": "Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification defined at: [https://github.com/package-url/purl-spec](https://github.com/package-url/purl-spec)",
                "examples": ["pkg:maven/com.acme/tomcat-catalina@9.0.14?packaging=jar"]
              },
              "swid": {
                "$ref": "#/definitions/swid",
                "title": "SWID Tag",
                "description": "Specifies metadata and content for [ISO-IEC 19770-2 Software Identification (SWID) Tags](https://www.iso.org/standard/65666.html)."
              },
              "modified": {
                "type": "boolean",
                "title": "Component Modified From Original",
                "description": "[Deprecated] - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating if the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original."
              },
              "pedigree": {
                "type": "object",
                "title": "Component Pedigree",
                "description": "Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.",
                "additionalProperties": false,
                "properties": {
                  "ancestors": {
                    "type": "array",
                    "title": "Ancestors",
                    "description": "Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.",
                    "items": {"$ref": "#/definitions/component"}
                  },
                  "descendants": {
                    "type": "array",
                    "title": "Descendants",
                    "description": "Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.",
                    "items": {"$ref": "#/definitions/component"}
                  },
                  "variants": {
                    "type": "array",
                    "title": "Variants",
                    "description": "Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.",
                    "items": {"$ref": "#/definitions/component"}
                  },
                  "commits": {
                    "type": "array",
                    "title": "Commits",
                    "description": "A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.",
                    "items": {"$ref": "#/definitions/commit"}
                  },
                  "patches": {
                    "type": "array",
                    "title": "Patches",
                    "description": ">A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.",
                    "items": {"$ref": "#/definitions/patch"}
                  },
                  "notes": {
                    "type": "string",
                    "title": "Notes",
                    "description": "Notes, observations, and other non-structured commentary describing the components pedigree."
                  }
                }
              },
              "externalReferences": {
                "type": "array",
                "items": {"$ref": "#/definitions/externalReference"},
                "title": "External References",
                "description": "External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM."
              },
              "components": {
                "type": "array",
                "items": {"$ref": "#/definitions/component"},
                "uniqueItems": true,
                "title": "Components",
                "description": "A list of software and hardware components included in the parent component. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system &#8594; subsystem &#8594; parts assembly in physical supply chains."
              },
              "evidence": {
                "$ref": "#/definitions/componentEvidence",
                "title": "Evidence",
                "description": "Provides the ability to document evidence collected through various forms of extraction or analysis."
              },
              "releaseNotes": {
                "$ref": "#/definitions/releaseNotes",
                "title": "Release notes",
                "description": "Specifies optional release notes."
              },
               "modelCard": {
                "$ref": "#/definitions/modelCard",
                "title": "Machine Learning Model Card"
              },
              "data": {
                "type": "array",
                "items": {"$ref": "#/definitions/componentData"},
                "title": "Data",
                "description": "This object SHOULD be specified for any component of type `data` and MUST NOT be specified for other component types."
              },
              "properties": {
                "type": "array",
                "title": "Properties",
                "description": "Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.",
                "items": {"$ref": "#/definitions/property"}
              },
              "signature": {
                "$ref": "#/definitions/signature",
                "title": "Signature",
                "description": "Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html)."
              }
            }
          }
    }
}